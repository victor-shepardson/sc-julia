####################################################################################################
# CMakeLists file for JuliaUGen
# Generated by Victor Shepardson
# 2022-02-02
####################################################################################################

# TODO: merge with Julia package Makefile so this is specified in one place
set(JULIA_PACKAGE SCJulia)
set(JULIA_LIBNAME scjulia)
set(JULIA_LIBVERSION 0.1.0)
set(JULIA_BUILD ${JULIA_PACKAGE}/${JULIA_LIBNAME}-${JULIA_LIBVERSION}/${JULIA_LIBNAME})

# set the julia executable (julia or julia-debug)
if(NOT JULIA)
    message(WARNING "No JULIA executable specified, defaulting to 'julia'.")
    set(JULIA julia)
endif()

# get the julia path
execute_process(
    COMMAND ${JULIA} --startup-file=no -e "print(dirname(Sys.BINDIR))"
    OUTPUT_VARIABLE JULIA_PATH
)
message(STATUS "Found Julia? ${JULIA_PATH}")

####################################################################################################
# basic project config
cmake_minimum_required(VERSION 3.12)
set(project_name "JuliaUGen")
set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake_modules ${CMAKE_MODULE_PATH})
set(CMAKE_CXX_STANDARD 17)

####################################################################################################
# load modules
include(SuperColliderServerPlugin RESULT_VARIABLE server_plugin_found)
if(NOT server_plugin_found)
    message(FATAL_ERROR "Could not find server plugin functions module")
endif()

include(SuperColliderCompilerConfig RESULT_VARIABLE compiler_config_found)
if(NOT compiler_config_found)
    message(FATAL_ERROR "Could not find compiler config module")
endif()

# Windows - puts redistributable DLLs in install directory
include(InstallRequiredSystemLibraries)

sc_check_sc_path("${SC_PATH}")
message(STATUS "Found SuperCollider: ${SC_PATH}")
set(SC_PATH "${SC_PATH}" CACHE PATH
    "Path to SuperCollider source. Relative paths are treated as relative to this script" FORCE)

include("${SC_PATH}/SCVersion.txt")
message(STATUS "Building plugins for SuperCollider version: ${SC_VERSION}")

# set project here to avoid SCVersion.txt clobbering our version info
project(${project_name})
sc_do_initial_compiler_config() # do after setting project so compiler ID is available

if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT OR NOT CMAKE_INSTALL_PREFIX)
    message(WARNING "No install prefix provided, defaulting to $BUILD_DIR/install")
    set(CMAKE_INSTALL_PREFIX "${CMAKE_BINARY_DIR}/install" CACHE PATH "Install prefix" FORCE)
endif()

message(STATUS "Install directory set to: ${CMAKE_INSTALL_PREFIX}")

####################################################################################################
# options
option(SUPERNOVA "Build plugins for supernova" ON)
option(SCSYNTH "Build plugins for scsynth" ON)
option(NATIVE "Optimize for native architecture" OFF)
option(STRICT "Use strict warning flags" OFF)
option(NOVA_SIMD "Build plugins with nova-simd support." ON)

####################################################################################################
# include libraries

if (NOVA_SIMD)
	add_definitions(-DNOVA_SIMD)
	include_directories(${SC_PATH}/external_libraries/nova-simd)
endif()

# Julia:
include_directories(${JULIA_PATH}/include/julia)
include_directories(${CMAKE_SOURCE_DIR}/${JULIA_BUILD}/include/)

set(CMAKE_MACOSX_RPATH true)
set(CMAKE_SKIP_BUILD_RPATH true)
add_link_options("-Wl,-rpath,@loader_path/../${JULIA_BUILD}/lib/")

add_library(JULIA_LIB SHARED IMPORTED)
set_property(TARGET JULIA_LIB PROPERTY IMPORTED_LOCATION ${CMAKE_SOURCE_DIR}/${JULIA_BUILD}/lib/lib${JULIA}.dylib)

add_library(SCJULIA_LIB SHARED IMPORTED)
set_property(TARGET SCJULIA_LIB PROPERTY IMPORTED_LOCATION ${CMAKE_SOURCE_DIR}/${JULIA_BUILD}/lib/lib${JULIA_LIBNAME}.dylib)

set(shared_libs
    JULIA_LIB
    SCJULIA_LIB
)

####################################################################################################
# Begin target JuliaUGen

set(JuliaUGen_cpp_files
    plugins/JuliaUGen/JuliaUGen.cpp
    plugins/JuliaUGen/JuliaUGen.hpp
)
set(JuliaUGen_sc_files
    plugins/JuliaUGen/JuliaUGen.sc
)
set(JuliaUGen_schelp_files
    plugins/JuliaUGen/JuliaUGen.schelp
)

sc_add_server_plugin(
    "JuliaUGen/JuliaUGen" # desination directory
    "JuliaUGen" # target name
    "${JuliaUGen_cpp_files}"
    "${JuliaUGen_sc_files}"
    "${JuliaUGen_schelp_files}"
    "${shared_libs}"
)

# End target JuliaUGen
####################################################################################################

####################################################################################################
# END PLUGIN TARGET DEFINITION
####################################################################################################

message(STATUS "Generating plugin targets done")
