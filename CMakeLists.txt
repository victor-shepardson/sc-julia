####################################################################################################
# CMakeLists file for JuliaUGen
# Generated by Victor Shepardson
# 2022-02-02
####################################################################################################

####################################################################################################
# basic project config
cmake_minimum_required(VERSION 3.12)
set(project_name "JuliaUGen")
set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake_modules ${CMAKE_MODULE_PATH})
set(CMAKE_CXX_STANDARD 17)

####################################################################################################
# load modules
include(SuperColliderServerPlugin RESULT_VARIABLE server_plugin_found)
if(NOT server_plugin_found)
    message(FATAL_ERROR "Could not find server plugin functions module")
endif()

include(SuperColliderCompilerConfig RESULT_VARIABLE compiler_config_found)
if(NOT compiler_config_found)
    message(FATAL_ERROR "Could not find compiler config module")
endif()

# Windows - puts redistributable DLLs in install directory
include(InstallRequiredSystemLibraries)

sc_check_sc_path("${SC_PATH}")
message(STATUS "Found SuperCollider: ${SC_PATH}")
set(SC_PATH "${SC_PATH}" CACHE PATH
    "Path to SuperCollider source. Relative paths are treated as relative to this script" FORCE)

include("${SC_PATH}/SCVersion.txt")
message(STATUS "Building plugins for SuperCollider version: ${SC_VERSION}")

# set project here to avoid SCVersion.txt clobbering our version info
project(${project_name})
sc_do_initial_compiler_config() # do after setting project so compiler ID is available

if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT OR NOT CMAKE_INSTALL_PREFIX)
    message(WARNING "No install prefix provided, defaulting to $BUILD_DIR/install")
    set(CMAKE_INSTALL_PREFIX "${CMAKE_BINARY_DIR}/install" CACHE PATH "Install prefix" FORCE)
endif()

message(STATUS "Install directory set to: ${CMAKE_INSTALL_PREFIX}")

####################################################################################################
# options
option(SUPERNOVA "Build plugins for supernova" ON)
option(SCSYNTH "Build plugins for scsynth" ON)
option(NATIVE "Optimize for native architecture" OFF)
option(STRICT "Use strict warning flags" OFF)
option(NOVA_SIMD "Build plugins with nova-simd support." ON)

####################################################################################################
# include libraries

if (NOVA_SIMD)
	add_definitions(-DNOVA_SIMD)
	include_directories(${SC_PATH}/external_libraries/nova-simd)
endif()

# Julia:
include_directories(${JULIA_PATH}/include/julia)
message(STATUS "Found Julia? ${JULIA_PATH}")
# TODO: infer version number?
include_directories(${CMAKE_SOURCE_DIR}/SCJulia/scjulia-0.1.0/scjulia/include/)

set(CMAKE_MACOSX_RPATH true)
set(CMAKE_SKIP_BUILD_RPATH true)
add_link_options("-Wl,-rpath,@loader_path/../SCJulia/scjulia-0.1.0/scjulia/lib/")
# add_link_options("-Wl,-rpath,@loader_path/../SCJulia/scjulia-0.1.0/scjulia/lib/:@loader_path/../SCJulia/scjulia-0.1.0/scjulia/lib/julia/")

# set(CMAKE_BUILD_WITH_INSTALL_RPATH false)
# set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
# set(CMAKE_INSTALL_RPATH_USE_LINK_PATH true)

# set(CMAKE_MACOSX_RPATH false)
# set(CMAKE_BUILD_RPATH_USE_ORIGIN true)
# set(CMAKE_BUILD_RPATH "@executable_path/../SCJulia/scjulia-0.1.0/scjulia/lib/:@executable_path/../SCJulia/scjulia-0.1.0/scjulia/lib/julia")
# link_directories(@loader_path/SCJulia/scjulia-0.1.0/scjulia/lib/)
# link_directories($ORIGIN/SCJulia/scjulia-0.1.0/scjulia/lib/julia)

# link_directories(${CMAKE_SOURCE_DIR}/SCJulia/scjulia-0.1.0/scjulia/lib/)
# link_directories(${CMAKE_SOURCE_DIR}/SCJulia/scjulia-0.1.0/scjulia/lib/julia)


# find_library(JULIA_LIB julia-debug PATHS ${CMAKE_SOURCE_DIR}/SCJulia/scjulia-0.1.0/scjulia/lib/ REQUIRED)
# find_library(SCJULIA_LIB scjulia PATHS ${CMAKE_SOURCE_DIR}/SCJulia/scjulia-0.1.0/scjulia/lib/ REQUIRED)

add_library(JULIA_LIB SHARED IMPORTED)
set_property(TARGET JULIA_LIB PROPERTY IMPORTED_LOCATION ${CMAKE_SOURCE_DIR}/SCJulia/scjulia-0.1.0/scjulia/lib/libjulia.dylib)

add_library(SCJULIA_LIB SHARED IMPORTED)
set_property(TARGET SCJULIA_LIB PROPERTY IMPORTED_LOCATION ${CMAKE_SOURCE_DIR}/SCJulia/scjulia-0.1.0/scjulia/lib/libscjulia.dylib)

# set(shared_libs
#     ${JULIA_LIB}
#     ${SCJULIA_LIB}
# )

####################################################################################################
# Begin target JuliaUGen

set(JuliaUGen_cpp_files
    plugins/JuliaUGen/JuliaUGen.cpp
    plugins/JuliaUGen/JuliaUGen.hpp
)
set(JuliaUGen_sc_files
    plugins/JuliaUGen/JuliaUGen.sc
)
set(JuliaUGen_schelp_files
    plugins/JuliaUGen/JuliaUGen.schelp
)

# sc_add_server_plugin(
#     "JuliaUGen/JuliaUGen" # desination directory
#     "JuliaUGen" # target name
#     "${JuliaUGen_cpp_files}"
#     "${JuliaUGen_sc_files}"
#     "${JuliaUGen_schelp_files}"
#     # "${shared_libs}"
# )

set(dest_dir "JuliaUGen/JuliaUGen")
set(name "JuliaUGen")
set(cpp "${JuliaUGen_cpp_files}") 
set(sy_name "${name}_scsynth")

add_library(${sy_name} MODULE "${cpp}")
# target_link_libraries(${sy_name} scjulia julia-debug)
# target_link_libraries(${sy_name} scjulia julia)
# target_link_libraries(${sy_name} JULIA_LIB SCJULIA_LIB)
target_link_libraries(${sy_name} ${JULIA_LIB} ${SCJULIA_LIB})
sc_add_server_plugin_properties(${sy_name} FALSE)
message(STATUS "Added server plugin target ${sy_name}")

# End target JuliaUGen
####################################################################################################

####################################################################################################
# END PLUGIN TARGET DEFINITION
####################################################################################################

message(STATUS "Generating plugin targets done")
